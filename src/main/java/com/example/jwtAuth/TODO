Шаги задания:
+1. Настройка Spring Security
Настройте проект Spring Boot с зависимостью на Spring Security и JWT.
Настройте SecurityConfig, чтобы приложение поддерживало JWT-аутентификацию.
Разрешите доступ к определённым ресурсам (например, /login) без аутентификации.

+2. Модель пользователя с ролями
Создайте модель User с полями username, password, и role. Роль может быть ENUM значением, например, "USER", "MODERATOR", "SUPER_ADMIN".
Добавьте поле isAccountNonLocked, чтобы управлять блокировкой аккаунтов.


+3. Генерация JWT-токенов
Реализуйте сервис для генерации и валидации JWT-токенов.
При успешной аутентификации генерируйте JWT, добавляйте информацию о ролях и срок действия токена.
Возвращайте JWT в ответе при успешной аутентификации.

+4. Аутентификация с использованием JWT
Настройте фильтр JwtAuthenticationFilter, который будет перехватывать запросы и проверять JWT-токен.
Если токен валиден и не истек, добавляйте аутентификацию пользователя в SecurityContext.

+5. Настройка кастомных ролей и доступа к эндпоинтам
Создайте несколько кастомных ролей: "USER", "MODERATOR", "SUPER_ADMIN".
В контроллерах ограничьте доступ к определённым методам для пользователей с определёнными ролями:
USER — доступ к общим ресурсам (например, просмотр профиля).
MODERATOR — доступ к модерации контента.
SUPER_ADMIN — полный доступ к управлению пользователями.
Настройте роли через аннотации @PreAuthorize или @Secured на уровне методов.

6. Проверка срока действия JWT и обработка истечения
Реализуйте логику проверки срока действия токена.
Если срок действия токена истёк, обработайте это событие, отправляя соответствующий HTTP-ответ клиенту (например, 401 Unauthorized).

+7. Блокировка аккаунтов после неудачных попыток входа
Создайте механизм подсчёта неудачных попыток входа.
Если количество неудачных попыток входа превышает определённый порог (например, 5 попыток), блокируйте аккаунт, установив поле isAccountNonLocked в false.
Реализуйте возможность разблокировки аккаунта администратором.


+8. Логирование аутентификации
Реализуйте логирование попыток входа (успешных и неудачных) и других важных действий (например, блокировка аккаунта, генерация JWT).
Логи можно записывать в файл или базу данных для анализа.

10. **Тестирование
Тестируйте приложение с разными пользователями и ролями, проверяя доступ к эндпоинтам.
Проверьте истечение токена и процесс блокировки аккаунта после нескольких неудачных попыток входа.
Убедитесь, что всё логирование работает корректно.
Дополнительные требования (опционально):
Реализуйте возможность обновления JWT через Refresh Token.
*Дополнительные материалы https://www.youtube.com/watch?v=EjrlN_OQVDQ https://www.youtube.com/watch?v=mUq9MGe5vZA https://www.youtube.com/watch?v=oeni_9g7too